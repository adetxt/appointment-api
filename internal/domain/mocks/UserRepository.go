// Code generated by mockery v2.26.1. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "appointment-api/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

type UserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRepository) EXPECT() *UserRepository_Expecter {
	return &UserRepository_Expecter{mock: &_m.Mock}
}

// GetUserByID provides a mock function with given fields: ctx, ID
func (_m *UserRepository) GetUserByID(ctx context.Context, ID int64) (entity.User, error) {
	ret := _m.Called(ctx, ID)

	var r0 entity.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (entity.User, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) entity.User); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRepository_GetUserByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByID'
type UserRepository_GetUserByID_Call struct {
	*mock.Call
}

// GetUserByID is a helper method to define mock.On call
//   - ctx context.Context
//   - ID int64
func (_e *UserRepository_Expecter) GetUserByID(ctx interface{}, ID interface{}) *UserRepository_GetUserByID_Call {
	return &UserRepository_GetUserByID_Call{Call: _e.mock.On("GetUserByID", ctx, ID)}
}

func (_c *UserRepository_GetUserByID_Call) Run(run func(ctx context.Context, ID int64)) *UserRepository_GetUserByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *UserRepository_GetUserByID_Call) Return(_a0 entity.User, _a1 error) *UserRepository_GetUserByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRepository_GetUserByID_Call) RunAndReturn(run func(context.Context, int64) (entity.User, error)) *UserRepository_GetUserByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, req
func (_m *UserRepository) GetUsers(ctx context.Context, req entity.GetUsersRequest) ([]entity.User, entity.Pagination, error) {
	ret := _m.Called(ctx, req)

	var r0 []entity.User
	var r1 entity.Pagination
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetUsersRequest) ([]entity.User, entity.Pagination, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetUsersRequest) []entity.User); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetUsersRequest) entity.Pagination); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Get(1).(entity.Pagination)
	}

	if rf, ok := ret.Get(2).(func(context.Context, entity.GetUsersRequest) error); ok {
		r2 = rf(ctx, req)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UserRepository_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type UserRepository_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.GetUsersRequest
func (_e *UserRepository_Expecter) GetUsers(ctx interface{}, req interface{}) *UserRepository_GetUsers_Call {
	return &UserRepository_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, req)}
}

func (_c *UserRepository_GetUsers_Call) Run(run func(ctx context.Context, req entity.GetUsersRequest)) *UserRepository_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.GetUsersRequest))
	})
	return _c
}

func (_c *UserRepository_GetUsers_Call) Return(_a0 []entity.User, _a1 entity.Pagination, _a2 error) *UserRepository_GetUsers_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *UserRepository_GetUsers_Call) RunAndReturn(run func(context.Context, entity.GetUsersRequest) ([]entity.User, entity.Pagination, error)) *UserRepository_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewUserRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserRepository(t mockConstructorTestingTNewUserRepository) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
