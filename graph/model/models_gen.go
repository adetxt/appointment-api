// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Appointment struct {
	ID              int64  `json:"id"`
	UserID          int64  `json:"userId"`
	CoachID         int64  `json:"coachId"`
	Status          string `json:"status"`
	Rescheduled     bool   `json:"rescheduled"`
	StartAt         string `json:"startAt"`
	EndAt           string `json:"endAt"`
	DurationMunites int    `json:"durationMunites"`
}

type MakeAppointmentRequest struct {
	// User ID who want to make the appointment
	UserID int64 `json:"userId"`
	// ID of target coach
	CoachID int64 `json:"coachId"`
	// Date time of the appointment. The time will **relative to user timezone**
	// Supports **multi-line** description for your [API](http://example.com)!
	StartAt         string `json:"startAt"`
	DurationMunites int    `json:"durationMunites"`
}

type RescheduleAppointmentRequest struct {
	AppointmentID   int64  `json:"appointmentID"`
	StartAt         string `json:"startAt"`
	DurationMunites int    `json:"durationMunites"`
}

type User struct {
	ID           int64          `json:"id"`
	Name         string         `json:"name"`
	Role         Role           `json:"role"`
	Timezone     string         `json:"timezone"`
	WorkingHours []*WorkingHour `json:"workingHours,omitempty"`
}

type UserAppointmentsRequest struct {
	Status    []AppointmentStatus `json:"status,omitempty"`
	StartDate *string             `json:"startDate,omitempty"`
	EndDate   *string             `json:"endDate,omitempty"`
	Tz        *string             `json:"tz,omitempty"`
}

type UserListResponse struct {
	Items     []*User `json:"items"`
	Page      int     `json:"page"`
	PageSize  int     `json:"pageSize"`
	Total     int64   `json:"total"`
	TotalPage int     `json:"totalPage"`
}

type WorkingHour struct {
	ID     int64  `json:"id"`
	UserID int64  `json:"userId"`
	Day    string `json:"day"`
	Start  string `json:"start"`
	End    string `json:"end"`
}

type AppointmentAction string

const (
	AppointmentActionApprove AppointmentAction = "APPROVE"
	AppointmentActionDecline AppointmentAction = "DECLINE"
)

var AllAppointmentAction = []AppointmentAction{
	AppointmentActionApprove,
	AppointmentActionDecline,
}

func (e AppointmentAction) IsValid() bool {
	switch e {
	case AppointmentActionApprove, AppointmentActionDecline:
		return true
	}
	return false
}

func (e AppointmentAction) String() string {
	return string(e)
}

func (e *AppointmentAction) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppointmentAction(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppointmentAction", str)
	}
	return nil
}

func (e AppointmentAction) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type AppointmentStatus string

const (
	AppointmentStatusScheduling   AppointmentStatus = "SCHEDULING"
	AppointmentStatusScheduled    AppointmentStatus = "SCHEDULED"
	AppointmentStatusCanceled     AppointmentStatus = "CANCELED"
	AppointmentStatusRescheduling AppointmentStatus = "RESCHEDULING"
	AppointmentStatusDeclined     AppointmentStatus = "DECLINED"
)

var AllAppointmentStatus = []AppointmentStatus{
	AppointmentStatusScheduling,
	AppointmentStatusScheduled,
	AppointmentStatusCanceled,
	AppointmentStatusRescheduling,
	AppointmentStatusDeclined,
}

func (e AppointmentStatus) IsValid() bool {
	switch e {
	case AppointmentStatusScheduling, AppointmentStatusScheduled, AppointmentStatusCanceled, AppointmentStatusRescheduling, AppointmentStatusDeclined:
		return true
	}
	return false
}

func (e AppointmentStatus) String() string {
	return string(e)
}

func (e *AppointmentStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = AppointmentStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid AppointmentStatus", str)
	}
	return nil
}

func (e AppointmentStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleUser  Role = "USER"
	RoleCoach Role = "COACH"
)

var AllRole = []Role{
	RoleUser,
	RoleCoach,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleCoach:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
